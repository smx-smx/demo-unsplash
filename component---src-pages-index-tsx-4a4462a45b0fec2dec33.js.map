{"version":3,"file":"component---src-pages-index-tsx-4a4462a45b0fec2dec33.js","mappings":"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","sources":["webpack://flowbite-react-template-gatsby/./src/components/SearchBar.tsx","webpack://flowbite-react-template-gatsby/./src/components/ImageList.tsx","webpack://flowbite-react-template-gatsby/./src/components/AppNavbar.tsx","webpack://flowbite-react-template-gatsby/./src/components/ImageViewer.tsx","webpack://flowbite-react-template-gatsby/./src/pages/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, TextInput } from 'flowbite-react';\n\ninterface Props {\n  initialQuery: string;\n  onSearch: (query: string) => void;\n}\n\nfunction SearchBar({ initialQuery, onSearch }: Props): JSX.Element {\n  const [query, setQuery] = useState<string>('');\n  const [dirty, setDirty] = useState<boolean>(false);\n\n  const handleSearch = (): void => {\n    onSearch(query);\n  };\n\n  const getQuery = () => {\n    // use user query, if modified\n    if (query.length > 0 || dirty) return query;\n    return initialQuery;\n  };\n\n  // reset keyword if prop changed\n  useEffect(() => {\n    setDirty(false);\n  }, [initialQuery]);\n\n  return (\n    <div className='m-3 flex flex-row gap-2'>\n      <TextInput\n        type=\"text\"\n        placeholder='Search for pictures...'\n        value={getQuery()}\n        onChange={(e) => {\n          setDirty(true);\n          setQuery(e.target.value)\n        }}\n        onKeyDown={(e) => {\n          if (e.key == 'Enter') handleSearch();\n        }}\n      />\n      <Button onClick={handleSearch}>Search</Button>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import React from \"react\";\nimport * as PhotoApi from \"unsplash-js/dist/methods/photos/types\";\nimport Image from \"./Image\";\n\ninterface ImageListProps {\n  images: PhotoApi.Basic[];\n}\n\nfunction ImageList({ images }: ImageListProps) {\n  return (\n    <div className=\"masonry-with-columns\">\n      {images.map((image) => (\n        <Image key={image.id} data={image} fullPage={false} />\n      ))}\n    </div>\n  );\n}\n\nexport default ImageList;\n","import React from \"react\";\nimport { Dropdown, Navbar } from \"flowbite-react\";\nimport { Link } from \"gatsby\";\n\nfunction AppNavbar() {\n  return (\n    <Navbar fluid rounded>\n      <Navbar.Brand as={Link} href=\"/\">\n        <span className=\"self-center whitespace-nowrap text-xl font-semibold dark:text-white\">\n          Unsplash Demo\n        </span>\n      </Navbar.Brand>\n      <div className=\"flex md:order-2\">\n        <Dropdown\n          arrowIcon={false}\n          inline\n          label={\n            <div className=\"relative size-10 overflow-hidden rounded-full bg-gray-100 dark:bg-gray-600\">\n              <svg\n                className=\"absolute -left-1 size-12 text-gray-400\"\n                fill=\"currentColor\"\n                viewBox=\"0 0 20 20\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n              >\n                <path\n                  fillRule=\"evenodd\"\n                  d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\"\n                ></path>\n              </svg>\n            </div>\n          }\n        >\n          <Dropdown.Header>\n            <span className=\"block text-sm text-gray-400\">User Menu</span>\n          </Dropdown.Header>\n          <Dropdown.Item>\n            <Link to=\"/favourites\">Favourites</Link>\n          </Dropdown.Item>\n        </Dropdown>\n      </div>\n    </Navbar>\n  );\n}\n\nexport default AppNavbar;\n","import React, { useEffect, useState } from \"react\";\nimport * as PhotoApi from \"unsplash-js/dist/methods/photos/types\";\nimport SearchBar from \"../components/SearchBar\";\nimport ImageList from \"../components/ImageList\";\nimport { Button, Kbd, Label, Spinner, TextInput } from \"flowbite-react\";\nimport AppNavbar from \"../components/AppNavbar\";\nimport { ApiObject, api_create, api_setToken } from \"../api\";\nimport { MdKeyboardArrowLeft, MdKeyboardArrowRight } from \"react-icons/md\";\nimport { getLastQuery, saveLastQuery } from \"../store\";\n\ninterface ImageViewerProps {\n  mode: \"main\" | \"favourites\";\n  /** properties for favourites mode */\n  imageIds?: string[];\n}\n\nfunction ImageViewer({ mode, imageIds }: ImageViewerProps) {\n  const [query, setQuery] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  const [images, setImages] = useState<PhotoApi.Basic[]>([]);\n  const [pageNumber, setPageNumber] = useState<number>(1);\n  const [error, setError] = useState<string | null>(null);\n  const [apiToken, setApiToken] = useState<string>(\"\");\n  const [api, setApi] = useState<ApiObject | null | undefined>(undefined);\n\n  // keep low due to rate limiting\n  const FAVS_PER_PAGE = 5;\n  const totalPages =\n    imageIds !== undefined\n      ? Math.ceil(imageIds.length / FAVS_PER_PAGE)\n      : undefined;\n\n  const isApiAvailable = () => {\n    return (\n      api !== undefined && // api status: unknown\n      api !== null // api status: key not present\n    );\n  };\n\n  const createApi = () => {\n    const api = api_create();\n    setApi(api);\n  };\n\n  /** run on startup */\n  useEffect(() => {\n    const lastQuery = getLastQuery();\n    if (lastQuery !== null) {\n      setQuery(lastQuery);\n    }\n    createApi();\n  }, []);\n\n  /** run when API state changes */\n  useEffect(() => {\n    if (isApiAvailable()) {\n      if (mode === \"main\" && query.length < 1) {\n        randomSearch();\n      } else {\n        fetchImages();\n      }\n    }\n  }, [api]);\n\n  /** save last query */\n  useEffect(() => {\n    saveLastQuery(query);\n  }, [query]);\n\n  /**\n   * run when the page number changes,\n   * or the query changes\n   **/\n  useEffect(() => {\n    fetchImages();\n  }, [pageNumber, query]);\n\n  const getRandomKeyword = () => {\n    const keywords = [\n      \"Nature\",\n      \"Landscape\",\n      \"Animals\",\n      \"City\",\n      \"Food\",\n      \"Travel\",\n      \"Art\",\n      \"Architecture\",\n      \"Technology\",\n      \"Music\",\n    ];\n    const randomIndex = Math.floor(Math.random() * keywords.length);\n    return keywords[randomIndex];\n  };\n\n  const randomSearch = () => {\n    const randomQuery = getRandomKeyword();\n    setQuery(randomQuery);\n  };\n\n  const fetchImagesInternal = async () => {\n    if (!isApiAvailable()) {\n      return;\n    }\n    const theApi = api as ApiObject;\n\n    setLoading(true);\n\n    if (mode === \"main\") {\n      const resp = await theApi.search.getPhotos({\n        query: query,\n        page: pageNumber,\n        perPage: 25,\n      });\n      setImages(resp.response?.results ?? []);\n    } else if (mode == \"favourites\" && imageIds !== undefined) {\n      const start = (pageNumber - 1) * FAVS_PER_PAGE;\n      const end = start + FAVS_PER_PAGE;\n      const items = imageIds.slice(start, end);\n      const resp = await Promise.all(\n        items.map((id) => {\n          console.debug(`fetching ${id}...`);\n          return theApi.photos.get({ photoId: id });\n        }),\n      );\n      const respData = resp\n        .filter((r) => r.response !== undefined)\n        .map((r) => r.response) as PhotoApi.Full[];\n      setImages(respData ?? []);\n    }\n    setLoading(false);\n  };\n\n  const fetchImages = async () => {\n    try {\n      setError(null);\n      await fetchImagesInternal();\n    } catch (error) {\n      setLoading(false);\n      console.error(error);\n      setError(\"An error occurred, please try again later\");\n    }\n  };\n\n  const paginationOp = async (op: string) => {\n    let handled = true;\n    let nextPageNumber = pageNumber;\n    switch (op) {\n      case \"+\":\n        if (totalPages === undefined || pageNumber < totalPages) {\n          nextPageNumber = pageNumber + 1;\n        }\n        break;\n      case \"-\":\n        if (pageNumber > 1) {\n          nextPageNumber = pageNumber - 1;\n        }\n        break;\n      default:\n        handled = false;\n        break;\n    }\n    if (handled) {\n      setPageNumber(nextPageNumber);\n    }\n  };\n\n  if (!isApiAvailable()) {\n    return (\n      <main className=\"flex min-h-screen items-center justify-center gap-2 dark:bg-gray-800\">\n        <div className=\"flex flex-col\">\n          <div>\n            <Label>Enter api Token</Label>\n          </div>\n          <div className=\"flex flex-row gap-1\">\n            <TextInput\n              onChange={(e) => setApiToken(e.target.value)}\n            ></TextInput>\n            <Button\n              onClick={() => {\n                api_setToken(apiToken);\n                createApi();\n              }}\n            >\n              Set\n            </Button>\n          </div>\n        </div>\n      </main>\n    );\n  }\n\n  return (\n    <main className=\"m-4 dark:bg-gray-800\">\n      <AppNavbar />\n      <div>\n        <div className=\"m-3 flex flex-row justify-center\">\n          {mode === \"main\" && (\n            <SearchBar\n              initialQuery={query}\n              onSearch={(query) => {\n                if (query.length < 1) {\n                  randomSearch();\n                } else {\n                  setQuery(query);\n                }\n              }}\n            />\n          )}\n          {loading && <Spinner size={\"xl\"} />}\n        </div>\n\n        <div>\n          <div className=\"mr-0 flex w-full flex-wrap place-content-end gap-1 justify-self-end\">\n            <span>\n              Page {pageNumber}\n              {totalPages !== undefined && (\n                <>\n                  /{totalPages} <br />\n                  (5 per page)\n                </>\n              )}\n            </span>\n          </div>\n          <div className=\"mr-0 flex w-full flex-wrap place-content-end gap-1 justify-self-end\">\n            <Kbd onClick={() => paginationOp(\"-\")} icon={MdKeyboardArrowLeft} />\n            <Kbd\n              onClick={() => paginationOp(\"+\")}\n              icon={MdKeyboardArrowRight}\n            />\n          </div>\n          {error && (\n            <div className=\"w-full text-center\">\n              <span className=\"text-2xl text-red-500\">{error}</span>\n            </div>\n          )}\n          <ImageList images={images} />\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default ImageViewer;\n","import type { HeadFC, PageProps } from \"gatsby\";\nimport React from 'react';\nimport ImageViewer from \"../components/ImageViewer\";\n\nconst IndexPage: React.FC<PageProps> = () => {\n  return (\n    <main>\n      <ImageViewer mode='main' />\n    </main>\n  );\n};\n\nexport default IndexPage;\n\nexport const Head: HeadFC = () => <title>UnsplashJs Demo</title>;\n"],"names":["initialQuery","onSearch","query","setQuery","useState","dirty","setDirty","handleSearch","useEffect","React","className","TextInput","type","placeholder","value","length","onChange","e","target","onKeyDown","key","Button","onClick","images","map","image","Image","id","data","fullPage","Navbar","fluid","rounded","Brand","as","Link","href","Dropdown","arrowIcon","inline","label","fill","viewBox","xmlns","fillRule","d","Header","Item","to","mode","imageIds","loading","setLoading","setImages","pageNumber","setPageNumber","error","setError","apiToken","setApiToken","api","setApi","undefined","totalPages","Math","ceil","isApiAvailable","createApi","api_create","lastQuery","getLastQuery","randomSearch","fetchImages","saveLastQuery","randomQuery","keywords","floor","random","getRandomKeyword","async","theApi","resp","search","getPhotos","page","perPage","response","_resp$response","results","start","end","items","slice","respData","Promise","all","console","debug","photos","get","photoId","filter","r","fetchImagesInternal","paginationOp","handled","nextPageNumber","op","AppNavbar","SearchBar","Spinner","size","Kbd","icon","MdKeyboardArrowLeft","MdKeyboardArrowRight","ImageList","Label","api_setToken","ImageViewer","Head"],"sourceRoot":""}